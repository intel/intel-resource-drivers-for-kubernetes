---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: intel-gaudi-resource-driver-kubelet-plugin
  namespace: intel-gaudi-resource-driver
  labels:
    app: intel-gaudi-resource-driver-kubelet-plugin
spec:
  selector:
    matchLabels:
      app: intel-gaudi-resource-driver-kubelet-plugin
  template:
    metadata:
      labels:
        app: intel-gaudi-resource-driver-kubelet-plugin
    spec:
      serviceAccount: intel-gaudi-resource-driver-service-account
      serviceAccountName: intel-gaudi-resource-driver-service-account
      containers:
      - name: kubelet-plugin
        image: intel/intel-gaudi-resource-driver:v0.3.0
        imagePullPolicy: IfNotPresent
        command: ["/kubelet-gaudi-plugin", "-m"]
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: SYSFS_ROOT
          value: "/sys"
        # Only use DEVFS_ROOT when using fake devfs with device-faker
        #- name: DEVFS_ROOT
        #  value: "/devfs"

        volumeMounts:
        - name: plugins-registry
          mountPath: /var/lib/kubelet/plugins_registry
        - name: plugins
          mountPath: /var/lib/kubelet/plugins
        - name: cdi
          mountPath: /etc/cdi
        - name: varruncdi
          mountPath: /var/run/cdi
        - name: sysfs
          mountPath: "/sys"
        # Only use DEVFS_ROOT when using fake devfs with device-faker
        #- name: devfs
        #  mountPath: "/devfs"
        securityContext:
          privileged: true
          capabilities:
            drop: [ "ALL" ]
          readOnlyRootFilesystem: true
          runAsUser: 0
          seccompProfile:
            type: RuntimeDefault
      volumes:
      - name: plugins-registry
        hostPath:
          path: /var/lib/kubelet/plugins_registry
      - name: plugins
        hostPath:
          path: /var/lib/kubelet/plugins
      - name: cdi
        hostPath:
          path: /etc/cdi
      - name: varruncdi
        hostPath:
          path: /var/run/cdi
      - name: sysfs
        hostPath:
          path: /sys
      # Only use DEVFS_ROOT when using fake devfs with device-faker
      #- name: devfs
      #  hostPath:
      #    path: /dev

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: intel-gaudi-resource-driver-service-account
  namespace: intel-gaudi-resource-driver

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: intel-gaudi-resource-driver-role
  namespace: intel-gaudi-resource-driver
rules:
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["get"]
- apiGroups: ["resource.k8s.io"]
  resources: ["resourceslices"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["resource.k8s.io"]
  resources: ["resourceclaims"]
  verbs: ["get"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: intel-gaudi-resource-driver-role-binding
  namespace: intel-gaudi-resource-driver
subjects:
- kind: ServiceAccount
  name: intel-gaudi-resource-driver-service-account
  namespace: intel-gaudi-resource-driver
roleRef:
  kind: ClusterRole
  name: intel-gaudi-resource-driver-role
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionPolicy
metadata:
  name: resourceslices-policy-dra-kubelet-plugin-gaudi
spec:
  failurePolicy: Fail
  matchConstraints:
    resourceRules:
    - apiGroups:   ["resource.k8s.io"]
      apiVersions: ["v1beta1"]
      operations:  ["CREATE", "UPDATE", "DELETE"]
      resources:   ["resourceslices"]
  matchConditions:
  - name: isRestrictedUser
    expression: >-
      request.userInfo.username == "system:serviceaccount:intel-gaudi-resource-driver:intel-gaudi-resource-driver-service-account"
  variables:
  - name: userNodeName
    expression: >-
      request.userInfo.extra[?'authentication.kubernetes.io/node-name'][0].orValue('')
  - name: objectNodeName
    expression: >-
      (request.operation == "DELETE" ? oldObject : object).spec.?nodeName.orValue("")
  validations:
  - expression: variables.userNodeName != ""
    message: >-
      no node association found for user, this user must run in a pod on a node and ServiceAccountTokenPodNodeInfo must be enabled
  - expression: variables.userNodeName == variables.objectNodeName
    messageExpression: >-
      "this user running on node '"+variables.userNodeName+"' may not modify " +
      (variables.objectNodeName == "" ?"cluster resourceslices" : "resourceslices on node '"+variables.objectNodeName+"'")
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingAdmissionPolicyBinding
metadata:
  name: resourceslices-policy-dra-kubelet-plugin-gaudi
spec:
  policyName: resourceslices-policy-dra-kubelet-plugin-gaudi
  validationActions: [Deny]
