/*
 * Copyright (c) 2024, Intel Corporation.  All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	"context"
	"time"

	scheme "github.com/intel/intel-resource-drivers-for-kubernetes/pkg/intel.com/resource/gaudi/clientset/versioned/scheme"
	v1alpha1 "github.com/intel/intel-resource-drivers-for-kubernetes/pkg/intel.com/resource/gaudi/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// GaudiClaimParametersGetter has a method to return a GaudiClaimParametersInterface.
// A group's client should implement this interface.
type GaudiClaimParametersGetter interface {
	GaudiClaimParameters(namespace string) GaudiClaimParametersInterface
}

// GaudiClaimParametersInterface has methods to work with GaudiClaimParameters resources.
type GaudiClaimParametersInterface interface {
	Create(ctx context.Context, gaudiClaimParameters *v1alpha1.GaudiClaimParameters, opts v1.CreateOptions) (*v1alpha1.GaudiClaimParameters, error)
	Update(ctx context.Context, gaudiClaimParameters *v1alpha1.GaudiClaimParameters, opts v1.UpdateOptions) (*v1alpha1.GaudiClaimParameters, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*v1alpha1.GaudiClaimParameters, error)
	List(ctx context.Context, opts v1.ListOptions) (*v1alpha1.GaudiClaimParametersList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.GaudiClaimParameters, err error)
	GaudiClaimParametersExpansion
}

// gaudiClaimParameters implements GaudiClaimParametersInterface
type gaudiClaimParameters struct {
	client rest.Interface
	ns     string
}

// newGaudiClaimParameters returns a GaudiClaimParameters
func newGaudiClaimParameters(c *GaudiV1alpha1Client, namespace string) *gaudiClaimParameters {
	return &gaudiClaimParameters{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the gaudiClaimParameters, and returns the corresponding gaudiClaimParameters object, and an error if there is any.
func (c *gaudiClaimParameters) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.GaudiClaimParameters, err error) {
	result = &v1alpha1.GaudiClaimParameters{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("gaudiclaimparameters").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do(ctx).
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of GaudiClaimParameters that match those selectors.
func (c *gaudiClaimParameters) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.GaudiClaimParametersList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1alpha1.GaudiClaimParametersList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("gaudiclaimparameters").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do(ctx).
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested gaudiClaimParameters.
func (c *gaudiClaimParameters) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("gaudiclaimparameters").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch(ctx)
}

// Create takes the representation of a gaudiClaimParameters and creates it.  Returns the server's representation of the gaudiClaimParameters, and an error, if there is any.
func (c *gaudiClaimParameters) Create(ctx context.Context, gaudiClaimParameters *v1alpha1.GaudiClaimParameters, opts v1.CreateOptions) (result *v1alpha1.GaudiClaimParameters, err error) {
	result = &v1alpha1.GaudiClaimParameters{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("gaudiclaimparameters").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(gaudiClaimParameters).
		Do(ctx).
		Into(result)
	return
}

// Update takes the representation of a gaudiClaimParameters and updates it. Returns the server's representation of the gaudiClaimParameters, and an error, if there is any.
func (c *gaudiClaimParameters) Update(ctx context.Context, gaudiClaimParameters *v1alpha1.GaudiClaimParameters, opts v1.UpdateOptions) (result *v1alpha1.GaudiClaimParameters, err error) {
	result = &v1alpha1.GaudiClaimParameters{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("gaudiclaimparameters").
		Name(gaudiClaimParameters.Name).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(gaudiClaimParameters).
		Do(ctx).
		Into(result)
	return
}

// Delete takes name of the gaudiClaimParameters and deletes it. Returns an error if one occurs.
func (c *gaudiClaimParameters) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("gaudiclaimparameters").
		Name(name).
		Body(&opts).
		Do(ctx).
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *gaudiClaimParameters) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	var timeout time.Duration
	if listOpts.TimeoutSeconds != nil {
		timeout = time.Duration(*listOpts.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("gaudiclaimparameters").
		VersionedParams(&listOpts, scheme.ParameterCodec).
		Timeout(timeout).
		Body(&opts).
		Do(ctx).
		Error()
}

// Patch applies the patch and returns the patched gaudiClaimParameters.
func (c *gaudiClaimParameters) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.GaudiClaimParameters, err error) {
	result = &v1alpha1.GaudiClaimParameters{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("gaudiclaimparameters").
		Name(name).
		SubResource(subresources...).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(data).
		Do(ctx).
		Into(result)
	return
}
